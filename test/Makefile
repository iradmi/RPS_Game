# A sample Makefile for building both Google Mock and Google Test and
# using them in user tests.  This file is self-contained, so you don't
# need to use the Makefile in Google Test's source tree.  Please tweak
# it to suit your environment and project.  You may want to move it to
# your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.
# Please tweak the following variable definitions as needed by your
# project, except GMOCK_HEADERS and GTEST_HEADERS, which you can use
# in your own targets but shouldn't modify.
# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file, or if you want to use
# a copy of Google Test at a different location.
GTEST_DIR = ./googletest-main/googletest
# Points to the root of Google Mock, relative to where this file is.
# Remember to tweak this if you move this file.
GMOCK_DIR = ./googletest-main/googlemock
# Where to find user code.
TEST_DIR    = .
SRC_DIR     = ../src
OUT_DIR     =  build
SRC_INC_DIR = ../include

# Flags passed to the preprocessor.
# Set Google Test and Google Mock's header directories as system
# directories, such that the compiler doesn't generate warnings in
# these headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include -isystem $(GMOCK_DIR)/include -I$(SRC_INC_DIR)
# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -std=c++20
# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
#SRCS = $(wildcard $(SRC_DIR)/*.cpp)
#OBJS = $(patsubst $(SRC_DIR)/%.cpp,$(BUILD_DIR)/%.o,$(SRCS))

#TESTS   = $(wildcard $(TEST_DIR)/*.cpp)
#TARGETS = $(patsubst $(TEST_DIR)/%.cpp,$(OUT_DIR)/%,$(TESTS))
TESTS  = $(OUT_DIR)/main
TESTS += $(OUT_DIR)/rpsGameTest
TESTS += $(OUT_DIR)/mtTest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h
# All Google Mock headers. Note that all Google Test headers are
# included here too, as they are #included by Google Mock headers.
# Usually you shouldn't change this definition.	
GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
                $(GMOCK_DIR)/include/gmock/internal/*.h \
                $(GTEST_HEADERS)
# House-keeping build targets.
all : $(TESTS)
clean :
	rm -f $(OUT_DIR)/*
# Builds gmock.a and gmock_main.a.  These libraries contain both
# Google Mock and Google Test.  A test should link with either gmock.a
# or gmock_main.a, depending on whether it defines its own main()
# function.  It's fine if your test only uses features from Google
# Test (and not Google Mock).
# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)
GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc $(GMOCK_HEADERS)
# For simplicity and to avoid depending on implementation details of
# Google Mock and Google Test, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Mock and
# Google Test compile fast and for ordinary users their source rarely
# changes.
$(OUT_DIR)/gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GTEST_DIR)/src/gtest-all.cc -o $@
#$(OUT_DIR)/gtest_main.o : $(GTEST_SRCS_)
#	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) \
			-c $(GTEST_DIR)/src/gtest_main.cc -o $@
$(OUT_DIR)/gmock-all.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock-all.cc -o $@
$(OUT_DIR)/gmock_main.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) $(CXXFLAGS) \
            -c $(GMOCK_DIR)/src/gmock_main.cc -o $@ 
$(OUT_DIR)/gmock.a : $(OUT_DIR)/gmock-all.o $(OUT_DIR)/gtest-all.o
	$(AR) $(ARFLAGS) -o $@ $^
$(OUT_DIR)/gmock_main.a : $(OUT_DIR)/gmock-all.o $(OUT_DIR)/gtest-all.o $(OUT_DIR)/gmock_main.o
	$(AR) $(ARFLAGS) -o $@ $^

#$(OUT_DIR)/gtest.a : $(OUT_DIR)/gtest-all.o
#	$(AR) $(ARFLAGS) -o $@ $^

#$(OUT_DIR)/gtest_main.a : $(OUT_DIR)/gtest-all.o $(OUT_DIR)/gtest_main.o
#	$(AR) $(ARFLAGS) -o $@ $^

$(OUT_DIR)/%.o : $(SRC_DIR)/%.cpp 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

$(TARGETS): $(OUT_DIR)/% : $(OBJS) | $(GMOCK_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS -c $(TEST_DIR)/$*.cpp -lpthread  $^ -o $@
    
$(OUT_DIR)/MersenneTwisterRngTest.o : $(TEST_DIR)/MersenneTwisterRngTest.cpp $(GMOCK_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/MersenneTwisterRngTest.cpp -o $@

$(OUT_DIR)/mtTest : $(OUT_DIR)/MersenneTwisterRngTest.o $(OUT_DIR)/gmock_main.a $(OUT_DIR)/MersenneTwisterRngEngine.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

$(OUT_DIR)/RpsGameTest.o : $(TEST_DIR)/RpsGameTest.cpp $(GMOCK_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/RpsGameTest.cpp -o $@

$(OUT_DIR)/rpsGameTest : $(OUT_DIR)/RpsGameTest.o $(OUT_DIR)/gmock_main.a $(OUT_DIR)/RpsGame.o $(OUT_DIR)/MersenneTwisterRngEngine.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

$(OUT_DIR)/Main.o : $(TEST_DIR)/Main.cpp $(GMOCK_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/Main.cpp -o $@

$(OUT_DIR)/main : $(OUT_DIR)/Main.o \
 				  $(OUT_DIR)/RpsGameTest.o \
                  $(OUT_DIR)/RpsGame.o \
                  $(OUT_DIR)/MersenneTwisterRngEngine.o \
                  $(OUT_DIR)/MersenneTwisterRngTest.o \
                  $(OUT_DIR)/gmock_main.a \
 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
	
run: 
	$(OUT_DIR)/main

 

